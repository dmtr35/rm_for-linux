#!/bin/bash -x

if [ -n "$SUDO_USER" ]; then
	# Если скрипт запущен с sudo, используйте $SUDO_USER
	user="$SUDO_USER"
	home=$(eval echo ~$user)
else
	# В противном случае используйте текущего пользователя
	user="$USER"
	home="$HOME"
fi

date="$(date +'%d-%m-%Y_%H-%M-%S')"
trash="$home/.my_trash"
hash -d rm
rm="$(which -a rm | grep -v '/usr/local/bin/rm' | awk 'NR==1 {print}')"

# проверка есть ли корзина, и создать если нет 
if [ ! -d "$trash" ]; then
	mkdir -p "$trash"
fi
# если нету аргументов, выход
[ "$#" -eq 0 ] && echo "no filename" && exit


checkTrash() {
	if [ -d "$filePath" ] && [ "$filePath" == "$trash" ]; then
		$rm -rf $trash/*
		return 1 
	fi
}

checkFile() {
	if [ ! -e "$filePath" ] && [ ! -L "$filePath" ] && [ "$check_v" == "true" ]; then
		echo "Файл '$file' не существует"
		return 1
	elif [ ! -e "$filePath" ]&& [ ! -L "$filePath" ]; then
		return 1
	fi
}


removeOrRestore() {
	for file in "$@"
	do
		filePath=$(realpath -s $file)
		fileName=$(basename $filePath)
		pathWithOutName=$(dirname $filePath)
		# восстановление файлов
		if [ $pathWithOutName  == "$trash" ]; then
			restoreFilePathAll=$(echo "$fileName" | awk '{gsub("-", "/"); print}' | awk '{print substr($0, 1, length($0)-7)}' | awk -F'_' '{print $NF}')
			restoreFileName=$(basename $restoreFilePathAll)
			restoreFilePath=$(dirname $restoreFilePathAll)

			checkFile "$filePath"
			if [ "$?" -ne 0 ]; then
				continue
			fi

			tar -xzf $filePath --absolute-names -C $restoreFilePath
			if [ "$?" -eq 2 ] && [ "$check_v" == "true" ]; then
				echo 'Cannot open: Permission denied'
				continue
			elif [ "$?" -eq 2 ]; then
				continue
			fi

			rm -rf $filePath
			if [ "$check_v" == "true" ]; then 
				echo "file: $restoreFileName => restored: $restoreFilePathAll"
			fi
		# удаление файлов
		elif [  $pathWithOutName  != "$trash" ]; then
			currentChange=$(echo $filePath | awk '{gsub("/", "-"); print}')
			fileNameDate="${fileName}____${date}"
			checkTrash "$filePath"
			if [ "$?" -eq 1 ]; then
				continue 
			fi
			checkFile "$filePath"
			if [ "$?" -ne 0 ]; then
				continue
			fi
			# перед перемещением файла, переименовываем его, добавляя дату
			tar -czf /$trash/${fileNameDate}_${currentChange}.tar.gz --absolute-names $filePath

			$rm -rf "$filePath"
			case "$?" in
				0)
					if [ "$check_v" == "true" ]; then
						echo "removed & save: $fileName -> $trash"
					fi
					;;
				*)
					if [ "$check_v" == "true" ]; then
						echo 'Permission denied'
					fi
					$rm -rf $trash/${fileNameDate}_${currentChange}.tar.gz
					;;
			esac
		fi
	done
}



remove() {
	if [ "$#" -ge 1 ]; then
		for file in "$@"
		do
			# цикл на удаление файлов, без сохранения
			for file in "$@"
			do
				filePath=$(realpath -s $file)
				fileName=$(basename $filePath)
				checkTrash "$filePath"
				if [ "$?" -eq 1 ]; then
					continue 
				fi
				checkFile "$filePath"
				if [ "$?" -ne 0 ]; then
					continue
				fi
				$rm -rf "$filePath"
				if [ "$check_v" == "true" ]; then 
					echo "removed: $fileName"
				fi
			done
		done
	fi
}



case $1 in
	-r)
		if [ "$#" -eq 1 ]; then
			echo "no filename"
			exit
		fi
		shift
		if [ "$1" == "-v" ]; then
			check_v=true
			shift
		fi
		remove "$@"
		;;
	-rv | -vr)
		[ "$#" -eq 1 ] && echo "no filename" && exit
		check_v=true
		shift
		remove "$@"
		;;


	-v)
		if [ "$#" -eq 1 ]; then
			echo "no filename"
			exit
		fi
		shift
		if [ "$1" == "-r" ]; then
			check_v=true
			shift
			remove "$@"
			exit
		fi
		check_v=true
		removeOrRestore "$@"
		;;

	-h | --help) 
		[ "$#" -gt 1 ] && echo "too many arguments" && exit
		echo "
		DESCRIPTION
		put the program in /usr/local/bin/

		SYNOPSIS
		rr [OPTION]... [FILE]...				

		OPTIONS
		the "rr" command deletes the file, saving it in /home/<user>/.my_trash, or restores it with the same command

		-r: without saving the file, normal deletion without recovery

		-v: receive a report on completed work

		-h,--help: help
		"
		;;

	*) removeOrRestore "$@"
		;;

	esac





